
lipo_ctrl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000398  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000398  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000016bc  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000598  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000208f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002eb  00000000  00000000  000020cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000019b  00000000  00000000  000023ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000218  00000000  00000000  00002555  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00002770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000131  00000000  00000000  000027d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000148  00000000  00000000  00002905  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002a4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	40 d0       	rcall	.+128    	; 0x9e <main>
  1e:	ba c1       	rjmp	.+884    	; 0x394 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <adc_setup>:
}

void adc_setup (void)
{
	// Set the ADC input to PB2/ADC1
	ADMUX |= (1 << MUX0);
  22:	38 9a       	sbi	0x07, 0	; 7
	ADMUX |= (1 << REFS0);//use internal 1,1V Voltage ref
  24:	3e 9a       	sbi	0x07, 6	; 7
//	ADMUX |= (1 << ADLAR); //enable 8 bit mode
	// Set the prescaler to clock/128 & enable ADC
	ADCSRA |= (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
  26:	86 b1       	in	r24, 0x06	; 6
  28:	83 68       	ori	r24, 0x83	; 131
  2a:	86 b9       	out	0x06, r24	; 6
  2c:	08 95       	ret

0000002e <adc_read>:
	
}

uint16_t adc_read (void)
{
  2e:	24 e0       	ldi	r18, 0x04	; 4
	uint16_t ret_val =0;
  30:	60 e0       	ldi	r22, 0x00	; 0
  32:	70 e0       	ldi	r23, 0x00	; 0
	for ( uint8_t i=0;i<4;i++)
	{
	// Start the conversion
	ADCSRA |= (1 << ADSC);
  34:	36 9a       	sbi	0x06, 6	; 6
	// Wait for it to finish
	while (ADCSRA & (1 << ADSC));		
  36:	36 99       	sbic	0x06, 6	; 6
  38:	fe cf       	rjmp	.-4      	; 0x36 <adc_read+0x8>
	//ret_val+=ADCH; //for 8 bit mode
	ret_val+=ADC;//for 10 bit mode 
  3a:	84 b1       	in	r24, 0x04	; 4
  3c:	95 b1       	in	r25, 0x05	; 5
  3e:	68 0f       	add	r22, r24
  40:	79 1f       	adc	r23, r25
  42:	21 50       	subi	r18, 0x01	; 1
}

uint16_t adc_read (void)
{
	uint16_t ret_val =0;
	for ( uint8_t i=0;i<4;i++)
  44:	b9 f7       	brne	.-18     	; 0x34 <adc_read+0x6>
	// Wait for it to finish
	while (ADCSRA & (1 << ADSC));		
	//ret_val+=ADCH; //for 8 bit mode
	ret_val+=ADC;//for 10 bit mode 
	}
	return (ADC_TO_mV (ret_val/4) ); //returns value in mV
  46:	76 95       	lsr	r23
  48:	67 95       	ror	r22
  4a:	76 95       	lsr	r23
  4c:	67 95       	ror	r22
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	95 d0       	rcall	.+298    	; 0x17e <__floatunsisf>
  54:	28 eb       	ldi	r18, 0xB8	; 184
  56:	3e e1       	ldi	r19, 0x1E	; 30
  58:	4b e4       	ldi	r20, 0x4B	; 75
  5a:	51 e4       	ldi	r21, 0x41	; 65
  5c:	f6 d0       	rcall	.+492    	; 0x24a <__mulsf3>
  5e:	63 d0       	rcall	.+198    	; 0x126 <__fixunssfsi>
}
  60:	86 2f       	mov	r24, r22
  62:	97 2f       	mov	r25, r23
  64:	08 95       	ret

00000066 <pwm_setup>:


void pwm_setup (void)
{
	
	  TCCR0A=0xA3; TCCR0B=0x02; TCNT0=0x00; TIMSK0=0x00; 
  66:	83 ea       	ldi	r24, 0xA3	; 163
  68:	8f bd       	out	0x2f, r24	; 47
  6a:	82 e0       	ldi	r24, 0x02	; 2
  6c:	83 bf       	out	0x33, r24	; 51
  6e:	12 be       	out	0x32, r1	; 50
  70:	19 be       	out	0x39, r1	; 57
  72:	08 95       	ret

00000074 <beep>:
	*/
}

void beep(uint8_t anz)
{
	for (uint8_t i =0; i<anz; i++)
  74:	88 23       	and	r24, r24
  76:	91 f0       	breq	.+36     	; 0x9c <beep+0x28>
  78:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB |= (1<<PB0);//pb0 high
  7a:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	e7 e9       	ldi	r30, 0x97	; 151
  7e:	fa e3       	ldi	r31, 0x3A	; 58
  80:	31 97       	sbiw	r30, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <beep+0xc>
  84:	00 c0       	rjmp	.+0      	; 0x86 <beep+0x12>
  86:	00 00       	nop
	_delay_ms(50);		
	PORTB &= ~(1<<PB0);//pb0 low
  88:	c0 98       	cbi	0x18, 0	; 24
  8a:	e7 e9       	ldi	r30, 0x97	; 151
  8c:	fa e3       	ldi	r31, 0x3A	; 58
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <beep+0x1a>
  92:	00 c0       	rjmp	.+0      	; 0x94 <beep+0x20>
  94:	00 00       	nop
	*/
}

void beep(uint8_t anz)
{
	for (uint8_t i =0; i<anz; i++)
  96:	9f 5f       	subi	r25, 0xFF	; 255
  98:	98 13       	cpse	r25, r24
  9a:	ef cf       	rjmp	.-34     	; 0x7a <beep+0x6>
  9c:	08 95       	ret

0000009e <main>:
#define ADC_TO_mV(s)  s*12.695 // in mV


int main(void)
{	
	  DDRB &= ~((1 << DDB2) | (1 << DDB3) | (1 << DDB4));	//PB1, PB3 und PB4 als Eingang
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	83 7e       	andi	r24, 0xE3	; 227
  a2:	87 bb       	out	0x17, r24	; 23
	  PORTB |= (1 << PB3) | (1 << PB4);	// pull up einschalten (für PB3, PB4)
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	88 61       	ori	r24, 0x18	; 24
  a8:	88 bb       	out	0x18, r24	; 24
	  DDRB |= (1 << DDB0)|(1 << DDB1);	//als ausgang setzten
  aa:	87 b3       	in	r24, 0x17	; 23
  ac:	83 60       	ori	r24, 0x03	; 3
  ae:	87 bb       	out	0x17, r24	; 23

	  adc_setup();//für PB2
  b0:	b8 df       	rcall	.-144    	; 0x22 <adc_setup>
  b2:	87 ec       	ldi	r24, 0xC7	; 199
  b4:	9f ea       	ldi	r25, 0xAF	; 175
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <__stack+0x17>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <__stack+0x1d>
  bc:	00 00       	nop
	  // PORTB |= (1<<PB2);//pb2 high
	
	_delay_ms(150);//wait for all connectiosn to be good

	uint16_t accu_voltage=adc_read();	
  be:	b7 df       	rcall	.-146    	; 0x2e <adc_read>
	uint8_t nr_of_cells = 0; 
	if (accu_voltage>2500 && accu_voltage<4300 )
  c0:	9c 01       	movw	r18, r24
  c2:	25 5c       	subi	r18, 0xC5	; 197
  c4:	39 40       	sbci	r19, 0x09	; 9
  c6:	27 30       	cpi	r18, 0x07	; 7
  c8:	37 40       	sbci	r19, 0x07	; 7
  ca:	68 f0       	brcs	.+26     	; 0xe6 <__stack+0x47>
	{
		nr_of_cells=1;
	} 
	else if (accu_voltage>5400 && accu_voltage<8600 )
  cc:	9c 01       	movw	r18, r24
  ce:	29 51       	subi	r18, 0x19	; 25
  d0:	35 41       	sbci	r19, 0x15	; 21
  d2:	2f 37       	cpi	r18, 0x7F	; 127
  d4:	3c 40       	sbci	r19, 0x0C	; 12
  d6:	48 f0       	brcs	.+18     	; 0xea <__stack+0x4b>
	{
		nr_of_cells=2;
	}
	else if (accu_voltage>8600 && accu_voltage<12900 )
  d8:	89 59       	subi	r24, 0x99	; 153
  da:	91 42       	sbci	r25, 0x21	; 33
  dc:	8b 3c       	cpi	r24, 0xCB	; 203
  de:	90 41       	sbci	r25, 0x10	; 16
  e0:	30 f0       	brcs	.+12     	; 0xee <__stack+0x4f>
	  // PORTB |= (1<<PB2);//pb2 high
	
	_delay_ms(150);//wait for all connectiosn to be good

	uint16_t accu_voltage=adc_read();	
	uint8_t nr_of_cells = 0; 
  e2:	c0 e0       	ldi	r28, 0x00	; 0
  e4:	05 c0       	rjmp	.+10     	; 0xf0 <__stack+0x51>
	if (accu_voltage>2500 && accu_voltage<4300 )
	{
		nr_of_cells=1;
  e6:	c1 e0       	ldi	r28, 0x01	; 1
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <__stack+0x51>
	} 
	else if (accu_voltage>5400 && accu_voltage<8600 )
	{
		nr_of_cells=2;
  ea:	c2 e0       	ldi	r28, 0x02	; 2
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <__stack+0x51>
	}
	else if (accu_voltage>8600 && accu_voltage<12900 )
	{
		nr_of_cells=3;
  ee:	c3 e0       	ldi	r28, 0x03	; 3
	}	
	
	beep(nr_of_cells);
  f0:	8c 2f       	mov	r24, r28
  f2:	c0 df       	rcall	.-128    	; 0x74 <beep>
	pwm_setup();//must be after beep (beep benutzt den portpin normal)
  f4:	b8 df       	rcall	.-144    	; 0x66 <pwm_setup>
    PB0_PWM(0);
  f6:	16 be       	out	0x36, r1	; 54
	PB1_PWM(0);
  f8:	19 bc       	out	0x29, r1	; 41
	while(1)
    {
		if (adc_read()<(nr_of_cells*cut_off_voltage)) //alert
  fa:	8c 2f       	mov	r24, r28
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	60 e8       	ldi	r22, 0x80	; 128
 100:	7c e0       	ldi	r23, 0x0C	; 12
 102:	36 d1       	rcall	.+620    	; 0x370 <__mulhi3>
 104:	ec 01       	movw	r28, r24
		{
			PB0_PWM(128);
 106:	10 e8       	ldi	r17, 0x80	; 128
	pwm_setup();//must be after beep (beep benutzt den portpin normal)
    PB0_PWM(0);
	PB1_PWM(0);
	while(1)
    {
		if (adc_read()<(nr_of_cells*cut_off_voltage)) //alert
 108:	92 df       	rcall	.-220    	; 0x2e <adc_read>
 10a:	8c 17       	cp	r24, r28
 10c:	9d 07       	cpc	r25, r29
 10e:	18 f4       	brcc	.+6      	; 0x116 <__stack+0x77>
		{
			PB0_PWM(128);
 110:	16 bf       	out	0x36, r17	; 54
			PB1_PWM(128);		
 112:	19 bd       	out	0x29, r17	; 41
 114:	01 c0       	rjmp	.+2      	; 0x118 <__stack+0x79>
		}
		else//alert off
		{
			PB0_PWM(0);	
 116:	16 be       	out	0x36, r1	; 54
 118:	87 e9       	ldi	r24, 0x97	; 151
 11a:	9a e3       	ldi	r25, 0x3A	; 58
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <__stack+0x7d>
 120:	00 c0       	rjmp	.+0      	; 0x122 <__stack+0x83>
 122:	00 00       	nop
 124:	f1 cf       	rjmp	.-30     	; 0x108 <__stack+0x69>

00000126 <__fixunssfsi>:
 126:	70 d0       	rcall	.+224    	; 0x208 <__fp_splitA>
 128:	88 f0       	brcs	.+34     	; 0x14c <__fixunssfsi+0x26>
 12a:	9f 57       	subi	r25, 0x7F	; 127
 12c:	90 f0       	brcs	.+36     	; 0x152 <__fixunssfsi+0x2c>
 12e:	b9 2f       	mov	r27, r25
 130:	99 27       	eor	r25, r25
 132:	b7 51       	subi	r27, 0x17	; 23
 134:	a0 f0       	brcs	.+40     	; 0x15e <__fixunssfsi+0x38>
 136:	d1 f0       	breq	.+52     	; 0x16c <__fixunssfsi+0x46>
 138:	66 0f       	add	r22, r22
 13a:	77 1f       	adc	r23, r23
 13c:	88 1f       	adc	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	1a f0       	brmi	.+6      	; 0x148 <__fixunssfsi+0x22>
 142:	ba 95       	dec	r27
 144:	c9 f7       	brne	.-14     	; 0x138 <__fixunssfsi+0x12>
 146:	12 c0       	rjmp	.+36     	; 0x16c <__fixunssfsi+0x46>
 148:	b1 30       	cpi	r27, 0x01	; 1
 14a:	81 f0       	breq	.+32     	; 0x16c <__fixunssfsi+0x46>
 14c:	77 d0       	rcall	.+238    	; 0x23c <__fp_zero>
 14e:	b1 e0       	ldi	r27, 0x01	; 1
 150:	08 95       	ret
 152:	74 c0       	rjmp	.+232    	; 0x23c <__fp_zero>
 154:	67 2f       	mov	r22, r23
 156:	78 2f       	mov	r23, r24
 158:	88 27       	eor	r24, r24
 15a:	b8 5f       	subi	r27, 0xF8	; 248
 15c:	39 f0       	breq	.+14     	; 0x16c <__fixunssfsi+0x46>
 15e:	b9 3f       	cpi	r27, 0xF9	; 249
 160:	cc f3       	brlt	.-14     	; 0x154 <__fixunssfsi+0x2e>
 162:	86 95       	lsr	r24
 164:	77 95       	ror	r23
 166:	67 95       	ror	r22
 168:	b3 95       	inc	r27
 16a:	d9 f7       	brne	.-10     	; 0x162 <__fixunssfsi+0x3c>
 16c:	3e f4       	brtc	.+14     	; 0x17c <__fixunssfsi+0x56>
 16e:	90 95       	com	r25
 170:	80 95       	com	r24
 172:	70 95       	com	r23
 174:	61 95       	neg	r22
 176:	7f 4f       	sbci	r23, 0xFF	; 255
 178:	8f 4f       	sbci	r24, 0xFF	; 255
 17a:	9f 4f       	sbci	r25, 0xFF	; 255
 17c:	08 95       	ret

0000017e <__floatunsisf>:
 17e:	e8 94       	clt
 180:	09 c0       	rjmp	.+18     	; 0x194 <__floatsisf+0x12>

00000182 <__floatsisf>:
 182:	97 fb       	bst	r25, 7
 184:	3e f4       	brtc	.+14     	; 0x194 <__floatsisf+0x12>
 186:	90 95       	com	r25
 188:	80 95       	com	r24
 18a:	70 95       	com	r23
 18c:	61 95       	neg	r22
 18e:	7f 4f       	sbci	r23, 0xFF	; 255
 190:	8f 4f       	sbci	r24, 0xFF	; 255
 192:	9f 4f       	sbci	r25, 0xFF	; 255
 194:	99 23       	and	r25, r25
 196:	a9 f0       	breq	.+42     	; 0x1c2 <__floatsisf+0x40>
 198:	f9 2f       	mov	r31, r25
 19a:	96 e9       	ldi	r25, 0x96	; 150
 19c:	bb 27       	eor	r27, r27
 19e:	93 95       	inc	r25
 1a0:	f6 95       	lsr	r31
 1a2:	87 95       	ror	r24
 1a4:	77 95       	ror	r23
 1a6:	67 95       	ror	r22
 1a8:	b7 95       	ror	r27
 1aa:	f1 11       	cpse	r31, r1
 1ac:	f8 cf       	rjmp	.-16     	; 0x19e <__floatsisf+0x1c>
 1ae:	fa f4       	brpl	.+62     	; 0x1ee <__floatsisf+0x6c>
 1b0:	bb 0f       	add	r27, r27
 1b2:	11 f4       	brne	.+4      	; 0x1b8 <__floatsisf+0x36>
 1b4:	60 ff       	sbrs	r22, 0
 1b6:	1b c0       	rjmp	.+54     	; 0x1ee <__floatsisf+0x6c>
 1b8:	6f 5f       	subi	r22, 0xFF	; 255
 1ba:	7f 4f       	sbci	r23, 0xFF	; 255
 1bc:	8f 4f       	sbci	r24, 0xFF	; 255
 1be:	9f 4f       	sbci	r25, 0xFF	; 255
 1c0:	16 c0       	rjmp	.+44     	; 0x1ee <__floatsisf+0x6c>
 1c2:	88 23       	and	r24, r24
 1c4:	11 f0       	breq	.+4      	; 0x1ca <__floatsisf+0x48>
 1c6:	96 e9       	ldi	r25, 0x96	; 150
 1c8:	11 c0       	rjmp	.+34     	; 0x1ec <__floatsisf+0x6a>
 1ca:	77 23       	and	r23, r23
 1cc:	21 f0       	breq	.+8      	; 0x1d6 <__floatsisf+0x54>
 1ce:	9e e8       	ldi	r25, 0x8E	; 142
 1d0:	87 2f       	mov	r24, r23
 1d2:	76 2f       	mov	r23, r22
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <__floatsisf+0x5e>
 1d6:	66 23       	and	r22, r22
 1d8:	71 f0       	breq	.+28     	; 0x1f6 <__floatsisf+0x74>
 1da:	96 e8       	ldi	r25, 0x86	; 134
 1dc:	86 2f       	mov	r24, r22
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	2a f0       	brmi	.+10     	; 0x1ee <__floatsisf+0x6c>
 1e4:	9a 95       	dec	r25
 1e6:	66 0f       	add	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	88 1f       	adc	r24, r24
 1ec:	da f7       	brpl	.-10     	; 0x1e4 <__floatsisf+0x62>
 1ee:	88 0f       	add	r24, r24
 1f0:	96 95       	lsr	r25
 1f2:	87 95       	ror	r24
 1f4:	97 f9       	bld	r25, 7
 1f6:	08 95       	ret

000001f8 <__fp_split3>:
 1f8:	57 fd       	sbrc	r21, 7
 1fa:	90 58       	subi	r25, 0x80	; 128
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	59 f0       	breq	.+22     	; 0x218 <__fp_splitA+0x10>
 202:	5f 3f       	cpi	r21, 0xFF	; 255
 204:	71 f0       	breq	.+28     	; 0x222 <__fp_splitA+0x1a>
 206:	47 95       	ror	r20

00000208 <__fp_splitA>:
 208:	88 0f       	add	r24, r24
 20a:	97 fb       	bst	r25, 7
 20c:	99 1f       	adc	r25, r25
 20e:	61 f0       	breq	.+24     	; 0x228 <__fp_splitA+0x20>
 210:	9f 3f       	cpi	r25, 0xFF	; 255
 212:	79 f0       	breq	.+30     	; 0x232 <__fp_splitA+0x2a>
 214:	87 95       	ror	r24
 216:	08 95       	ret
 218:	12 16       	cp	r1, r18
 21a:	13 06       	cpc	r1, r19
 21c:	14 06       	cpc	r1, r20
 21e:	55 1f       	adc	r21, r21
 220:	f2 cf       	rjmp	.-28     	; 0x206 <__fp_split3+0xe>
 222:	46 95       	lsr	r20
 224:	f1 df       	rcall	.-30     	; 0x208 <__fp_splitA>
 226:	08 c0       	rjmp	.+16     	; 0x238 <__fp_splitA+0x30>
 228:	16 16       	cp	r1, r22
 22a:	17 06       	cpc	r1, r23
 22c:	18 06       	cpc	r1, r24
 22e:	99 1f       	adc	r25, r25
 230:	f1 cf       	rjmp	.-30     	; 0x214 <__fp_splitA+0xc>
 232:	86 95       	lsr	r24
 234:	71 05       	cpc	r23, r1
 236:	61 05       	cpc	r22, r1
 238:	08 94       	sec
 23a:	08 95       	ret

0000023c <__fp_zero>:
 23c:	e8 94       	clt

0000023e <__fp_szero>:
 23e:	bb 27       	eor	r27, r27
 240:	66 27       	eor	r22, r22
 242:	77 27       	eor	r23, r23
 244:	cb 01       	movw	r24, r22
 246:	97 f9       	bld	r25, 7
 248:	08 95       	ret

0000024a <__mulsf3>:
 24a:	0a d0       	rcall	.+20     	; 0x260 <__mulsf3x>
 24c:	80 c0       	rjmp	.+256    	; 0x34e <__fp_round>
 24e:	71 d0       	rcall	.+226    	; 0x332 <__fp_pscA>
 250:	28 f0       	brcs	.+10     	; 0x25c <__mulsf3+0x12>
 252:	76 d0       	rcall	.+236    	; 0x340 <__fp_pscB>
 254:	18 f0       	brcs	.+6      	; 0x25c <__mulsf3+0x12>
 256:	95 23       	and	r25, r21
 258:	09 f0       	breq	.+2      	; 0x25c <__mulsf3+0x12>
 25a:	62 c0       	rjmp	.+196    	; 0x320 <__fp_inf>
 25c:	67 c0       	rjmp	.+206    	; 0x32c <__fp_nan>
 25e:	ef cf       	rjmp	.-34     	; 0x23e <__fp_szero>

00000260 <__mulsf3x>:
 260:	cb df       	rcall	.-106    	; 0x1f8 <__fp_split3>
 262:	a8 f3       	brcs	.-22     	; 0x24e <__mulsf3+0x4>

00000264 <__mulsf3_pse>:
 264:	99 23       	and	r25, r25
 266:	d9 f3       	breq	.-10     	; 0x25e <__mulsf3+0x14>
 268:	55 23       	and	r21, r21
 26a:	c9 f3       	breq	.-14     	; 0x25e <__mulsf3+0x14>
 26c:	95 0f       	add	r25, r21
 26e:	50 e0       	ldi	r21, 0x00	; 0
 270:	55 1f       	adc	r21, r21
 272:	aa 27       	eor	r26, r26
 274:	ee 27       	eor	r30, r30
 276:	ff 27       	eor	r31, r31
 278:	bb 27       	eor	r27, r27
 27a:	00 24       	eor	r0, r0
 27c:	08 94       	sec
 27e:	67 95       	ror	r22
 280:	20 f4       	brcc	.+8      	; 0x28a <__mulsf3_pse+0x26>
 282:	e2 0f       	add	r30, r18
 284:	f3 1f       	adc	r31, r19
 286:	b4 1f       	adc	r27, r20
 288:	0a 1e       	adc	r0, r26
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	44 1f       	adc	r20, r20
 290:	aa 1f       	adc	r26, r26
 292:	66 95       	lsr	r22
 294:	a9 f7       	brne	.-22     	; 0x280 <__mulsf3_pse+0x1c>
 296:	77 95       	ror	r23
 298:	30 f4       	brcc	.+12     	; 0x2a6 <__mulsf3_pse+0x42>
 29a:	f3 0f       	add	r31, r19
 29c:	b4 1f       	adc	r27, r20
 29e:	0a 1e       	adc	r0, r26
 2a0:	12 1e       	adc	r1, r18
 2a2:	08 f4       	brcc	.+2      	; 0x2a6 <__mulsf3_pse+0x42>
 2a4:	63 95       	inc	r22
 2a6:	33 0f       	add	r19, r19
 2a8:	44 1f       	adc	r20, r20
 2aa:	aa 1f       	adc	r26, r26
 2ac:	22 1f       	adc	r18, r18
 2ae:	76 95       	lsr	r23
 2b0:	99 f7       	brne	.-26     	; 0x298 <__mulsf3_pse+0x34>
 2b2:	87 95       	ror	r24
 2b4:	20 f4       	brcc	.+8      	; 0x2be <__mulsf3_pse+0x5a>
 2b6:	b4 0f       	add	r27, r20
 2b8:	0a 1e       	adc	r0, r26
 2ba:	12 1e       	adc	r1, r18
 2bc:	63 1f       	adc	r22, r19
 2be:	44 0f       	add	r20, r20
 2c0:	aa 1f       	adc	r26, r26
 2c2:	22 1f       	adc	r18, r18
 2c4:	33 1f       	adc	r19, r19
 2c6:	86 95       	lsr	r24
 2c8:	a9 f7       	brne	.-22     	; 0x2b4 <__mulsf3_pse+0x50>
 2ca:	86 2f       	mov	r24, r22
 2cc:	71 2d       	mov	r23, r1
 2ce:	60 2d       	mov	r22, r0
 2d0:	11 24       	eor	r1, r1
 2d2:	9f 57       	subi	r25, 0x7F	; 127
 2d4:	50 40       	sbci	r21, 0x00	; 0
 2d6:	8a f0       	brmi	.+34     	; 0x2fa <__mulsf3_pse+0x96>
 2d8:	e1 f0       	breq	.+56     	; 0x312 <__mulsf3_pse+0xae>
 2da:	88 23       	and	r24, r24
 2dc:	4a f0       	brmi	.+18     	; 0x2f0 <__mulsf3_pse+0x8c>
 2de:	ee 0f       	add	r30, r30
 2e0:	ff 1f       	adc	r31, r31
 2e2:	bb 1f       	adc	r27, r27
 2e4:	66 1f       	adc	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	88 1f       	adc	r24, r24
 2ea:	91 50       	subi	r25, 0x01	; 1
 2ec:	50 40       	sbci	r21, 0x00	; 0
 2ee:	a9 f7       	brne	.-22     	; 0x2da <__mulsf3_pse+0x76>
 2f0:	9e 3f       	cpi	r25, 0xFE	; 254
 2f2:	51 05       	cpc	r21, r1
 2f4:	70 f0       	brcs	.+28     	; 0x312 <__mulsf3_pse+0xae>
 2f6:	14 c0       	rjmp	.+40     	; 0x320 <__fp_inf>
 2f8:	a2 cf       	rjmp	.-188    	; 0x23e <__fp_szero>
 2fa:	5f 3f       	cpi	r21, 0xFF	; 255
 2fc:	ec f3       	brlt	.-6      	; 0x2f8 <__mulsf3_pse+0x94>
 2fe:	98 3e       	cpi	r25, 0xE8	; 232
 300:	dc f3       	brlt	.-10     	; 0x2f8 <__mulsf3_pse+0x94>
 302:	86 95       	lsr	r24
 304:	77 95       	ror	r23
 306:	67 95       	ror	r22
 308:	b7 95       	ror	r27
 30a:	f7 95       	ror	r31
 30c:	e7 95       	ror	r30
 30e:	9f 5f       	subi	r25, 0xFF	; 255
 310:	c1 f7       	brne	.-16     	; 0x302 <__mulsf3_pse+0x9e>
 312:	fe 2b       	or	r31, r30
 314:	88 0f       	add	r24, r24
 316:	91 1d       	adc	r25, r1
 318:	96 95       	lsr	r25
 31a:	87 95       	ror	r24
 31c:	97 f9       	bld	r25, 7
 31e:	08 95       	ret

00000320 <__fp_inf>:
 320:	97 f9       	bld	r25, 7
 322:	9f 67       	ori	r25, 0x7F	; 127
 324:	80 e8       	ldi	r24, 0x80	; 128
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	08 95       	ret

0000032c <__fp_nan>:
 32c:	9f ef       	ldi	r25, 0xFF	; 255
 32e:	80 ec       	ldi	r24, 0xC0	; 192
 330:	08 95       	ret

00000332 <__fp_pscA>:
 332:	00 24       	eor	r0, r0
 334:	0a 94       	dec	r0
 336:	16 16       	cp	r1, r22
 338:	17 06       	cpc	r1, r23
 33a:	18 06       	cpc	r1, r24
 33c:	09 06       	cpc	r0, r25
 33e:	08 95       	ret

00000340 <__fp_pscB>:
 340:	00 24       	eor	r0, r0
 342:	0a 94       	dec	r0
 344:	12 16       	cp	r1, r18
 346:	13 06       	cpc	r1, r19
 348:	14 06       	cpc	r1, r20
 34a:	05 06       	cpc	r0, r21
 34c:	08 95       	ret

0000034e <__fp_round>:
 34e:	09 2e       	mov	r0, r25
 350:	03 94       	inc	r0
 352:	00 0c       	add	r0, r0
 354:	11 f4       	brne	.+4      	; 0x35a <__fp_round+0xc>
 356:	88 23       	and	r24, r24
 358:	52 f0       	brmi	.+20     	; 0x36e <__fp_round+0x20>
 35a:	bb 0f       	add	r27, r27
 35c:	40 f4       	brcc	.+16     	; 0x36e <__fp_round+0x20>
 35e:	bf 2b       	or	r27, r31
 360:	11 f4       	brne	.+4      	; 0x366 <__fp_round+0x18>
 362:	60 ff       	sbrs	r22, 0
 364:	04 c0       	rjmp	.+8      	; 0x36e <__fp_round+0x20>
 366:	6f 5f       	subi	r22, 0xFF	; 255
 368:	7f 4f       	sbci	r23, 0xFF	; 255
 36a:	8f 4f       	sbci	r24, 0xFF	; 255
 36c:	9f 4f       	sbci	r25, 0xFF	; 255
 36e:	08 95       	ret

00000370 <__mulhi3>:
 370:	55 27       	eor	r21, r21
 372:	00 24       	eor	r0, r0

00000374 <__mulhi3_loop>:
 374:	80 ff       	sbrs	r24, 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <__mulhi3_skip1>
 378:	06 0e       	add	r0, r22
 37a:	57 1f       	adc	r21, r23

0000037c <__mulhi3_skip1>:
 37c:	66 0f       	add	r22, r22
 37e:	77 1f       	adc	r23, r23
 380:	61 15       	cp	r22, r1
 382:	71 05       	cpc	r23, r1
 384:	21 f0       	breq	.+8      	; 0x38e <__mulhi3_exit>
 386:	96 95       	lsr	r25
 388:	87 95       	ror	r24
 38a:	00 97       	sbiw	r24, 0x00	; 0
 38c:	99 f7       	brne	.-26     	; 0x374 <__mulhi3_loop>

0000038e <__mulhi3_exit>:
 38e:	95 2f       	mov	r25, r21
 390:	80 2d       	mov	r24, r0
 392:	08 95       	ret

00000394 <_exit>:
 394:	f8 94       	cli

00000396 <__stop_program>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <__stop_program>
